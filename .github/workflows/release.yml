name: Release
on:
  workflow_dispatch:
  repository_dispatch:
env:
  DEBIAN_FRONTEND: noninteractive
  TEMPORARY_DIRECTORY: /home/runner/work/_temp
  CI_COMMIT_MESSAGE: "chore: release"
  CI_COMMIT_AUTHOR: CI
  CI_COMMIT_EMAIL: ci@qoopido.com
jobs:
  build:
    name: Build multiarch images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          ssh-key: ${{ secrets.PRIVATE_KEY }}
          submodules: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Authenticate registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build image
        run: |
          # ROOT=$(pwd)
          # DOCKER_TAG_HASH="${{ github.event.client_payload.hash }}-$(date +'%Y%m%d-%H%M%S')"
          # DOCKER_TAG_VERSION="${{ github.event.client_payload.tag }}"
          # DOCKER_TAG_LATEST="latest"
          
          # cd ./telerising
          # git checkout ${{ github.event.client_payload.tag }}
          # cd -
          
          # docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 --compress --no-cache --force-rm --push -t qoopido/telerising.minimal:${DOCKER_TAG_HASH} -t qoopido/telerising.minimal:${DOCKER_TAG_VERSION} -t qoopido/telerising.minimal:${DOCKER_TAG_LATEST} .
          # docker buildx build --platform linux/amd64 --target builder --compress --load -t qoopido/telerising.minimal:amd64-builder .
          # docker buildx build --platform linux/arm64 --target builder --compress --load -t qoopido/telerising.minimal:arm64-builder .
          # docker buildx build --platform linux/arm/v7 --target builder --compress --load -t qoopido/telerising.minimal:arm-builder .
          # docker create --name=telerising-amd64 --platform linux/amd64 qoopido/telerising.minimal:amd64-builder
          # docker create --name=telerising-arm64 --platform linux/arm64 qoopido/telerising.minimal:arm64-builder
          # docker create --name=telerising-arm --platform linux/arm/v7 qoopido/telerising.minimal:arm-builder
          # rm -rf ./binaries/*
          # docker container cp telerising-amd64:/var/app/telerising.dist/ ./binaries/amd64
          # docker container cp telerising-arm64:/var/app/telerising.dist/ ./binaries/arm64
          # docker container cp telerising-arm:/var/app/telerising.dist/ ./binaries/arm
          # tar -czvf ./binaries/telerising.amd64.tar.gz -C ${ROOT}/binaries/amd64 ./
          # tar -czvf ./binaries/telerising.arm64.tar.gz -C ${ROOT}/binaries/arm64 ./
          # tar -czvf ./binaries/telerising.arm.tar.gz -C ${ROOT}/binaries/arm ./
          # rm -rf ./binaries/amd64 ./binaries/arm64 ./binaries/arm
          
          # git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          # git config --global user.email "${{ env.CI_COMMIT_EMAIL }}"
          # git add telerising
          # git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
          # git tag -a -f ${{ github.event.client_payload.tag }} -m ""
          # git push
      - name: Create release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_KEY }}
        with:
          draft: false
          prerelease: false
          release_name: ${{ github.event.client_payload.tag }}
          tag_name: ${{ github.event.client_payload.tag }}
          # body: ""
      - name: Upload amd64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_KEY }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./binaries/telerising.amd64.tar.gz
          asset_name: telerising.amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload arm64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_KEY }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./binaries/telerising.arm64.tar.gz
          asset_name: telerising.arm64.tar.gz
          asset_content_type: application/gzip
      - name: Upload arm/v7 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_KEY }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./binaries/telerising.arm.tar.gz
          asset_name: telerising.arm.tar.gz
          asset_content_type: application/gzip